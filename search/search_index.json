{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"phu - Phage Utilities","text":"A modular toolkit for viral genomics workflows"},{"location":"#what-is-phu","title":"What is phu?","text":"<p>phu (phage utilities) is a command-line toolkit designed to streamline viral genomics workflows. It provides intuitive commands that wrap complex bioinformatics utilities behind a consistent interface, making phage and viral sequence analysis more accessible and reproducible.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Modular Design: Clean, focused commands for specific tasks.</li> <li>Easy Installation: Available through Bioconda, PyPI.</li> <li>Reproducible: Consistent interface across different utilities.</li> <li>Well Documented: Comprehensive documentation and examples.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<p>Install <code>phu</code> using mamba or conda from the bioconda channel:</p> <pre><code>mamba create -n phu bioconda::phu\nmamba activate phu\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>phu -h\n\n Usage: phu [OPTIONS] COMMAND [ARGS]...                                                       \n\n Phage utilities CLI                                                                          \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help  -h        Show this message and exit.                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 screen          Screen contigs for a protein family using HMMER on predicted CDS.          \u2502\n\u2502 cluster         Sequence clustering wrapper around external 'vclust' with three modes.     \u2502\n\u2502 simplify-taxa   Simplify vContact taxonomy prediction columns into compact lineage codes.  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"#available-commands","title":"Available Commands","text":""},{"location":"#screen-protein-family-screening","title":"<code>screen</code> - Protein Family Screening","text":"<p>Screen DNA contigs for specific protein families using HMMER on predicted coding sequences. This is particularly useful for identifying viral contigs in metagenomic assemblies or filtering assemblies based on protein content.</p> <p>Example: <pre><code> phu screen --input-contigs assembly.fasta --combine-mode all viral_capsid.hmm portal.hmm\n</code></pre></p> <p>Learn more about protein screening \u2192</p>"},{"location":"#cluster-sequence-clustering","title":"<code>cluster</code> - Sequence Clustering","text":"<p>Cluster viral sequences into operational taxonomic units with three specialized modes:</p> <ul> <li><code>dereplication</code> - Remove duplicate sequences</li> <li><code>votu</code> - Group sequences into viral Operational Taxonomic Units</li> <li><code>species</code> - Create species-level clusters</li> </ul> <p>Example: <pre><code>phu cluster --mode votu --input-contigs viral-genomes.fasta\n</code></pre></p> <p>Learn more about clustering \u2192</p>"},{"location":"#simplify-taxa-taxonomy-simplification","title":"<code>simplify-taxa</code> - Taxonomy Simplification","text":"<p>Simplify verbose vContact taxonomy predictions into compact lineage codes for easier analysis and visualization. Example: <pre><code>phu simplify-taxa -i final_assignments.csv -o simplified_taxonomy.csv\n</code></pre></p> <p>Learn more about taxonomy simplification \u2192</p>"},{"location":"#use-cases","title":"Use Cases","text":"<ul> <li>Viral Identification: Screen metagenomic assemblies for viral contigs using protein markers</li> <li>Multi-marker Analysis: Find contigs with complete sets of viral proteins (e.g., capsid, portal, primase, terminase)</li> <li>Viral Metagenomics: Dereplicate and cluster viral contigs from metagenomic assemblies</li> <li>Phage Genomics: Organize phage genomes into taxonomic groups</li> <li>Comparative Analysis: Prepare datasets for phylogenetic and comparative genomic studies</li> <li>Database Construction: Build reference databases of viral sequences</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Whether it's bug reports, feature requests, or code contributions, please check out our GitHub repository.</p>"},{"location":"#citation","title":"Citation","text":"<p>If you use phu in your research, please cite:</p> <pre><code>Garc\u00eda-Botero, C. (2025). phu: Phage Utilities - A modular toolkit for viral genomics workflows. \nGitHub repository: https://github.com/camilogarciabotero/phu\n</code></pre>"},{"location":"#references","title":"References","text":"<p>This program uses several key tools and libraries, make sure to acknowledge them when using <code>phu</code>:</p> <ul> <li> <p>vclust: A high-performance clustering tool for viral sequences:</p> <p>Zielezinski A, Gudy\u015b A, Barylski J, Siminski K, Rozwalak P, Dutilh BE, Deorowicz S. Ultrafast and accurate sequence alignment and clustering of viral genomes. Nat Methods. https://doi.org/10.1038/s41592-025-02701-7</p> </li> <li> <p>seqkit: A toolkit for FASTA/Q file manipulation.</p> <p>Wei Shen*, Botond Sipos, and Liuyang Zhao. 2024. SeqKit2: A Swiss Army Knife for Sequence and Alignment Processing. iMeta e191. doi:10.1002/imt2.191.</p> </li> <li> <p>Prodigal: A gene prediction tool for prokaryotic genomes.</p> <p>Hyatt, D., Chen, G. L., LoCascio, P. F., Land, M. L., Larimer, F. W., &amp; Hauser, L. J. (2010). Prodigal: prokaryotic gene recognition and translation initiation site identification. BMC bioinformatics, 11(1), 119. https://doi.org/10.1186/1471-2105-11-119</p> </li> <li> <p>pyrodigal: A tool for gene prediction in prokaryotic genomes.</p> <p>Larralde, M., (2022). Pyrodigal: Python bindings and interface to Prodigal, an efficient method for gene prediction in prokaryotes. Journal of Open Source Software, 7(72), 4296, https://doi.org/10.21105/joss.04296</p> </li> <li> <p>HMMER: A suite of tools for sequence analysis using profile hidden Markov models.</p> <p>Eddy, S. R. (2011). Accelerated Profile HMM Searches. PLoS Computational Biology, 7(10), e1002195. https://doi.org/10.1371/journal.pcbi.1002195</p> </li> <li> <p>pyHMMER: Python bindings for HMMER.</p> <p>Larralde, M., &amp; Zeller, G. (2023). PyHMMER: a Python library binding to HMMER for efficient sequence analysis. Bioinformatics, 39(5). https://doi.org/10.1093/bioinformatics/btad214</p> </li> </ul>"},{"location":"commands/cluster/","title":"cluster","text":"<p>Sequence clustering wrapper around the external <code>vclust</code> tool with three preconfigured modes for common viral genomics workflows.</p>"},{"location":"commands/cluster/#overview","title":"Overview","text":"<p>The <code>phu cluster</code> command provides a simplified interface to <code>vclust</code>, implementing common use cases (see the vclust wiki) while allowing advanced customization via <code>--vclust-params</code>.</p>"},{"location":"commands/cluster/#synopsis","title":"Synopsis","text":"<pre><code>phu cluster --mode &lt;MODE&gt; --input-contigs &lt;FASTA_FILE&gt; [OPTIONS]\n</code></pre> <p>Outputs are placed in an output folder (default <code>clustered-contigs/</code>) and include cluster assignment TSVs and representative FASTA files, for example:</p> <pre><code>clustered-contigs/\n\u251c\u2500\u2500 ani.ids.tsv\n\u251c\u2500\u2500 ani.tsv\n\u251c\u2500\u2500 cluster_representatives_ids.txt\n\u251c\u2500\u2500 fltr.txt\n\u251c\u2500\u2500 representatives.fna\n\u2514\u2500\u2500 species.tsv\n</code></pre>"},{"location":"commands/cluster/#modes","title":"Modes","text":"<ul> <li> <p><code>dereplication</code> \u2014 remove redundant sequences while keeping representatives (cd-hit/ANI-based).</p> </li> <li> <p><code>votu</code> \u2014 cluster into viral Operational Taxonomic Units (leiden/ANI-based) following MIUViG-style defaults.</p> </li> <li> <p><code>species</code> \u2014 classify sequences into species (complete/TANI-based) following ICTV-style defaults.</p> </li> </ul>"},{"location":"commands/cluster/#default-parameters-by-mode","title":"Default parameters by mode","text":"| Parameter | dereplication | votu | species | |-----------|---------------|------|---------| | Algorithm | cd-hit | leiden | complete | | Metric | ani | ani | tani | | ANI cutoff | 95% | 95% | 95% | | Query coverage | 85% | 85% | None | | Pre-filter min-ident | 95% | 95% | 70% |"},{"location":"commands/cluster/#command-options","title":"Command Options","text":"<pre><code> Sequence clustering wrapper around external 'vclust' with three modes.      \n\n For advanced usage, provide custom vclust parameters as a quoted string.    \n See the vclust wiki for parameter details:                                  \n https://github.com/refresh-bio/vclust/wiki                                  \n\n Example:                                                                    \n     phu cluster --mode votu --input-contigs genomes.fna                                               \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --mode                   [dereplication|votu|s  dereplication | votu | \u2502\n\u2502                             pecies]                species                \u2502\n\u2502                                                    [required]             \u2502\n\u2502 *  --input-contigs          PATH                   Input FASTA [required] \u2502\n\u2502    --output-folder          PATH                   Output directory       \u2502\n\u2502                                                    [default:              \u2502\n\u2502                                                    clustered-contigs]     \u2502\n\u2502    --threads                INTEGER RANGE [x&gt;=0]   0=all cores; otherwise \u2502\n\u2502                                                    N threads              \u2502\n\u2502                                                    [default: 0]           \u2502\n\u2502    --vclust-params          TEXT                   Custom vclust          \u2502\n\u2502                                                    parameters:            \u2502\n\u2502                                                    \"--min-kmers 20        \u2502\n\u2502                                                    --outfmt lite --ani    \u2502\n\u2502                                                    0.97\"                  \u2502\n\u2502    --help           -h                             Show this message and  \u2502\n\u2502                                                    exit.                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"commands/cluster/#examples","title":"Examples","text":"<pre><code># Dereplicate viral contigs (default outputs in clustered-contigs/)\nphu cluster --mode dereplication --input-contigs viral_contigs.fna\n\n# Cluster into vOTUs following MIUViG standards\nphu cluster --mode votu --input-contigs viral_contigs.fna\n\n# Species classification following ICTV standards\nphu cluster --mode species --input-contigs complete_genomes.fna\n</code></pre>"},{"location":"commands/cluster/#advanced-pass-custom-vclust-parameters","title":"Advanced: pass custom vclust parameters","text":"<pre><code>phu cluster --mode species --input-contigs genomes.fna \\\n  --vclust-params=\"--metric tani --tani 0.70\" \n</code></pre> <p>Treat species clustering as genus-level by lowering similarity to 70%</p>"},{"location":"commands/cluster/#notes","title":"Notes","text":"<ul> <li><code>--vclust-params</code> provides full control over <code>vclust</code> parameters; use it to tune behavior for large or highly-redundant datasets.</li> <li>For reproducibility, save the full vclust command and parameters used (the tool often logs them in the output folder).</li> </ul>"},{"location":"commands/cluster/#see-also","title":"See also","text":"<ul> <li>vclust wiki: https://github.com/refresh-bio/vclust/wiki/6-Use-cases</li> </ul>"},{"location":"commands/screen/","title":"screen","text":""},{"location":"commands/screen/#what-does-it-do","title":"What does it do?","text":"<p>The <code>phu screen</code> command helps you find DNA contigs that contain specific protein families. It predicts proteins from your contigs, searches those proteins against Hidden Markov Model (HMM) profiles using pyHMMER (a fast Python implementation), and then selects contigs based on the matches and your combination/filtering rules. Think of it as a molecular search engine for pulling out contigs that contain the proteins you care about.</p> <p>This is especially useful when you have metagenomic assemblies and want to pull out contigs that belong to viruses, or when you're looking for contigs that contain specific metabolic pathways. The tool now includes advanced features like building custom HMMs from your target proteins and specialized viral gene prediction.</p>"},{"location":"commands/screen/#synopsis","title":"Synopsis","text":"<pre><code>phu screen --input-contigs [INPUT_CONTIGS] [HMMS...]\n</code></pre> <p>Example: <pre><code>phu screen --input-contigs your_contigs.fasta your_protein_family.hmm\n</code></pre></p> <p>This simple command will find all contigs in <code>your_contigs.fasta</code> that contain proteins matching <code>your_protein_family.hmm</code> and save them to a new file called <code>screened_contigs.fasta</code> in a folder named <code>phu-screen</code>.</p>"},{"location":"commands/screen/#how-it-works","title":"How it works","text":"<p>The screen command follows four main steps with several optional enhancements:</p> <p>First, it predicts all possible proteins from your DNA contigs using pyrodigal (for standard microbial genes) or pyrodigal-gv (for viral genes when available). This step translates your DNA sequences into protein sequences, creating names like <code>contig123|gene1</code>, <code>contig123|gene2</code>, etc. The tool automatically handles complex contig names with multiple <code>|</code> separators.</p> <p>Second, it searches the predicted proteins against your HMM profiles using pyHMMER, a fast in-memory Python implementation that eliminates the need for external HMMER binaries. Each HMM file is processed efficiently with native Python threading, and results maintain compatibility with standard HMMER formats.</p> <p>Third, it decides which contigs to keep based on the search results and your filtering criteria. This is where the \"combine mode\" logic becomes important if you're using multiple HMMs, distinguishing between HMMER \"targets\" (protein sequences) and HMM \"models\" (profiles that matched).</p> <p>Finally, it extracts the matching contigs from your original file and saves them to the output. The tool can also extract target proteins per model and build custom HMM profiles from those proteins for future use.</p>"},{"location":"commands/screen/#using-multiple-hmms","title":"Using Multiple HMMs","text":"<p>When you provide multiple HMM files, you need to decide how strict you want to be about matches. There are three ways to combine results:</p> <p>Any mode (the default) keeps contigs that match at least one model. Important detail: when a single contig matches multiple models, \"any\" preserves the best hit per model (rather than selecting only one overall best hit). As a result a contig that matches model A and model B will yield one protein for A and one protein for B (subject to <code>--top-per-contig</code>). This is useful when you want a representative protein per matched model from each contig.</p> <p>All mode only keeps contigs that match every single HMM you provided. This is very strict and useful when you need complete sets of proteins. For instance, if you're looking for complete viral genomes that must have all four proteins (capsid, portal, primase, and terminase), you would use \"all\" mode.</p> <p>Threshold mode lets you specify a minimum number of models that must match. This gives you flexibility between \"any\" and \"all\". You might require at least 3 out of 5 models to match, for example.</p>"},{"location":"commands/screen/#target-data-extraction-and-hmm-building","title":"Target Data Extraction and HMM Building","text":"<p>The tool offers powerful features for analyzing and reusing your screening results:</p> <p>Target Protein Extraction (<code>--save-target-proteins</code>) saves the actual protein sequences that matched each HMM model, organized in separate files per model. These proteins come only from contigs that passed your final filtering criteria.</p> <p>Custom HMM Building (<code>--save-target-hmms</code>) automatically builds new HMM profiles from your target proteins. This works independently of protein saving - if you only want HMMs, the tool will extract proteins temporarily, build the HMMs, then clean up. For single sequences, it builds individual HMMs; for multiple sequences, it creates simple alignments by padding to equal length before building consensus models.</p> <p>Viral Mode Support - When using viral gene prediction (if pyrodigal-gv is available), the tool is optimized for shorter, more compact viral genes and can handle overlapping gene structures common in viral genomes.</p>"},{"location":"commands/screen/#understanding-your-results","title":"Understanding Your Results","text":"<p>The main output is <code>screened_contigs.fasta</code>, which contains all the contigs that passed your filtering criteria. You'll also get <code>kept_contigs.txt</code> with just the names of these contigs.</p> <p>If you used multiple HMMs, pay attention to how the combine mode affects your results. In \"any\" mode (see above), a contig that matches multiple models will produce one (best) protein per matched model. In \"all\" mode, kept contigs must have at least one hit for every model, and the tool returns one best hit per model for each kept contig \u2014 so the per-model protein counts will be balanced across models.</p> <p>When you use the <code>--save-target-proteins</code> option, you'll get a folder called <code>target_proteins</code> with separate files for each model. Note the distinction:</p> <ul> <li>In \"pure\" HMM mode (default), each input HMM file is treated as one model and the output files are grouped by HMM filename (one file per input file).</li> <li>In \"mixed\" HMM mode (used for concatenated/pressed HMM files), a single HMM file can contain multiple model names; in that case <code>--save-target-proteins</code> will create one output file per model name found inside the domtblout.</li> </ul> <p>All saved protein FASTA files contain only proteins that come from contigs that were kept in the final <code>screened_contigs.fasta</code>, and are de-duplicated per model file.</p> <p>New Target Data Outputs: - <code>target_proteins/{model}_proteins.mfa</code> - Proteins matching each model (if <code>--save-target-proteins</code>) - <code>target_hmms/{model}.hmm</code> - Custom HMMs built from target proteins (if <code>--save-target-hmms</code>)</p> <p>These outputs respect your HMM mode settings and combination logic, ensuring consistency between your screening criteria and extracted data.</p>"},{"location":"commands/screen/#command-options","title":"Command Options","text":"<pre><code>Usage: phu screen [OPTIONS] HMMS...                                                        \n\n Screen contigs for protein families using pyHMMER on predicted CDS.                          \n\n Supports multiple HMM files with different combination modes:                              \n - any: Keep contigs matching any HMM (default, most permissive)                            \n - all: Keep contigs matching all HMMs (most restrictive)                                   \n - threshold: Keep contigs matching at least --min-hmm-hits HMMs                            \n\n HMM modes:                                                                                 \n - pure: Each HMM file contains one model (default, most common)                            \n - mixed: HMM files contain multiple models (pressed/concatenated HMMs)                     \n\n Examples:                                                                                  \n   phu screen -i contigs.fa --combine-mode any *.hmm\n   phu screen -i contigs.fa --combine-mode all file1.hmm file2.hmm file3.hmm\n   phu screen -i contigs.fa --combine-mode threshold --min-hmm-hits 5 pfam_database.hmm\n   phu screen -i contigs.fa --save-target-proteins *.hmm\n   phu screen -i contigs.fa --save-target-hmms *.hmm\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    hmms      HMMS...  HMM files (supports wildcards like *.hmm) [required]             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --input-contigs     -i                        PATH                Input contigs FASTA \u2502\n\u2502                                                                      [required]          \u2502\n\u2502    --output-folder     -o                        PATH                Output directory    \u2502\n\u2502                                                                      [default:           \u2502\n\u2502                                                                      phu-screen]         \u2502\n\u2502    --mode                                        TEXT                pyrodigal mode:     \u2502\n\u2502                                                                      meta|single         \u2502\n\u2502                                                                      [default: meta]     \u2502\n\u2502    --threads           -t                        INTEGER RANGE       Threads for both    \u2502\n\u2502                                                  [x&gt;=1]              pyrodigal and       \u2502\n\u2502                                                                      pyHMMER             \u2502\n\u2502                                                                      [default: 1]        \u2502\n\u2502    --min-bitscore                                FLOAT               Minimum bitscore to \u2502\n\u2502                                                                      keep a domain hit   \u2502\n\u2502    --max-evalue                                  FLOAT               Maximum independent \u2502\n\u2502                                                                      E-value to keep a   \u2502\n\u2502                                                                      domain hit          \u2502\n\u2502                                                                      [default: 1e-05]    \u2502\n\u2502    --top-per-contig                              INTEGER             Keep top-N hits per \u2502\n\u2502                                                                      contig (by          \u2502\n\u2502                                                                      bitscore)           \u2502\n\u2502                                                                      [default: 1]        \u2502\n\u2502    --min-gene-len                                INTEGER             Minimum gene length \u2502\n\u2502                                                                      for pyrodigal (nt)  \u2502\n\u2502                                                                      [default: 90]       \u2502\n\u2502    --ttable                                      INTEGER             NCBI translation    \u2502\n\u2502                                                                      table for coding    \u2502\n\u2502                                                                      sequences           \u2502\n\u2502                                                                      [default: 11]       \u2502\n\u2502    --keep-proteins         --no-keep-proteins                        Keep the protein    \u2502\n\u2502                                                                      FASTA used for      \u2502\n\u2502                                                                      searching           \u2502\n\u2502                                                                      [default:           \u2502\n\u2502                                                                      no-keep-proteins]   \u2502\n\u2502    --keep-domtbl           --no-keep-domtbl                          Keep raw domtblout  \u2502\n\u2502                                                                      from pyHMMER        \u2502\n\u2502                                                                      [default:           \u2502\n\u2502                                                                      keep-domtbl]        \u2502\n\u2502    --combine-mode                                TEXT                How to combine hits \u2502\n\u2502                                                                      from multiple HMMs: \u2502\n\u2502                                                                      any|all|threshold   \u2502\n\u2502                                                                      [default: any]      \u2502\n\u2502    --min-hmm-hits                                INTEGER             Minimum number of   \u2502\n\u2502                                                                      HMMs that must hit  \u2502\n\u2502                                                                      a contig (for       \u2502\n\u2502                                                                      threshold mode)     \u2502\n\u2502                                                                      [default: 1]        \u2502\n\u2502    --save-target-pro\u2026      --no-save-target-\u2026                        Save matched        \u2502\n\u2502                                                                      proteins per HMM    \u2502\n\u2502                                                                      model in            \u2502\n\u2502                                                                      target_proteins/    \u2502\n\u2502                                                                      subfolder           \u2502\n\u2502                                                                      [default:           \u2502\n\u2502                                                                      no-save-target-pro\u2026 \u2502\n\u2502    --save-target-hmms      --no-save-target-\u2026                        Build and save HMMs \u2502\n\u2502                                                                      from target         \u2502\n\u2502                                                                      proteins in         \u2502\n\u2502                                                                      target_hmms/        \u2502\n\u2502                                                                      subfolder           \u2502\n\u2502                                                                      [default:           \u2502\n\u2502                                                                      no-save-target-hmm\u2026 \u2502\n\u2502    --hmm-mode                                    TEXT                HMM file type:       \u2502\n\u2502                                                                      'pure' (one model   \u2502\n\u2502                                                                      per file) or         \u2502\n\u2502                                                                      'mixed'             \u2502\n\u2502                                                                      (pressed/concatena\u2026 \u2502\n\u2502                                                                      HMMs)               \u2502\n\u2502                                                                      [default: pure]     \u2502\n\u2502    --help              -h                                            Show this message   \u2502\n\u2502                                                                      and exit.           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Use <code>--output-folder</code> to change where the results are saved. The default is a folder called <code>phu-screen</code> in your current directory.</p> <p>Use <code>--threads</code> to speed things up if you have multiple CPU cores available. This affects both the protein prediction step and the HMMER searches.</p> <p>Use <code>--max-evalue</code> to make your searches more or less strict. The default is 1e-5, which is reasonably stringent. Lower values (like 1e-10) are more strict, while higher values (like 1e-3) are more permissive.</p> <p>Use <code>--save-target-proteins</code> if you want to get the actual protein sequences from the contigs that matched each model. The saved proteins are taken only from contigs that passed final filtering and are grouped per-model (see \"HMM modes\" above).</p> <p>Use <code>--save-target-hmms</code> to build custom HMM profiles from your target proteins. This works independently of <code>--save-target-proteins</code> - the tool can extract proteins temporarily just for HMM building if needed.</p>"},{"location":"commands/screen/#examples","title":"Examples","text":"<p>Find contigs with any viral protein (default \"any\" preserves best-per-model hits): <pre><code>phu screen --input-contigs assembly.fasta --combine-mode any viral_capsid.hmm viral_polymerase.hmm\n</code></pre></p> <p>Find contigs that have complete viral genomes (all four proteins): <pre><code>phu screen --input-contigs contigs.fa --combine-mode all capsid.hmm portal.hmm primase.hmm terminase.hmm\n</code></pre></p> <p>Use multiple threads and save the matching proteins (per-model grouping depends on <code>--hmm-mode</code>): <pre><code>phu screen --input-contigs large_assembly.fasta --threads 16 --save-target-proteins marker.hmm\n</code></pre></p> <p>Be more strict about matches: <pre><code>phu screen --input-contigs contigs.fa --max-evalue 1e-10 protein_family.hmm\n</code></pre></p> <p>Build custom HMMs from viral proteins (works with or without saving proteins): <pre><code>phu screen --input-contigs viral_assembly.fasta --save-target-hmms --combine-mode all capsid.hmm polymerase.hmm\n</code></pre></p> <p>Complete viral screening workflow with custom HMM generation: <pre><code>phu screen --input-contigs metagenome.fa --save-target-proteins --save-target-hmms --combine-mode threshold --min-hmm-hits 3 viral_marker1.hmm viral_marker2.hmm viral_marker3.hmm viral_marker4.hmm\n</code></pre></p> <p>Screen with complex contig names (automatically handled): <pre><code>phu screen --input-contigs scaffolds_with_complex|names|assembly.fa protein_family.hmm\n</code></pre></p>"},{"location":"commands/screen/#what-to-expect","title":"What to expect","text":"<p>Gene prediction usually takes 1-2 minutes per million base pairs of input. The pyHMMER searches are significantly faster than traditional HMMER due to in-memory processing and native Python threading. Performance scales well with the <code>--threads</code> option.</p> <p>The output size depends on how many contigs match your criteria. In \"any\" mode, you might get quite a few contigs. In \"all\" mode, you'll typically get fewer but higher-confidence results.</p> <p>New performance benefits: - Faster execution: pyHMMER eliminates subprocess overhead and file I/O - Better memory usage: In-memory processing of all data - No binary dependencies: Pure Python implementation - Robust handling: Automatically deals with complex contig naming schemes</p> <p>If you don't get any results, try relaxing your E-value threshold or check that your HMM files are in the correct format. If you get too many results, try using \"all\" mode instead of \"any\" mode, or make your E-value threshold more strict.</p>"},{"location":"commands/screen/#requirements","title":"Requirements","text":"<p>You need to have pyrodigal, pyHMMER, and seqkit installed and available. pyrodigal-gv is optional but recommended for viral genome analysis. Your input contigs should be in FASTA format, and your HMM files should be in HMMER3 format.</p> <p>Key improvements: - No HMMER binary required: pyHMMER provides a pure Python implementation - Automatic viral support: Uses pyrodigal-gv when available for viral gene prediction - Robust contig handling: Automatically handles complex contig naming with multiple separators - Flexible HMM building: Create custom profiles with or without saving intermediate proteins</p> <p>The command expects DNA sequences as input, not protein sequences. If you already have predicted proteins, you should use pyHMMER directly rather than this command.</p>"},{"location":"commands/simplify-taxa/","title":"simplify-taxa","text":"<p>Convert vContact taxonomy prediction strings into compact lineage codes for downstream analysis.</p>"},{"location":"commands/simplify-taxa/#overview","title":"Overview","text":"<p><code>phu simplify-taxa</code> transforms verbose vContact3 <code>*_prediction</code> columns into compact, standardized lineage codes (e.g. <code>Caudoviricetes:NF2:NG1</code>) to make taxonomy easier to filter, visualize, and analyze.</p>"},{"location":"commands/simplify-taxa/#synopsis","title":"Synopsis","text":"<pre><code>phu simplify-taxa -i &lt;INPUT_FILE&gt; -o &lt;OUTPUT_FILE&gt; [OPTIONS]\n</code></pre> <p>Input accepts CSV or TSV files from vContact3's <code>final_assignments.csv</code> output. Output format is automatically detected from file extension.</p>"},{"location":"commands/simplify-taxa/#inputoutput-formats","title":"Input/Output Formats","text":""},{"location":"commands/simplify-taxa/#supported-formats","title":"Supported Formats","text":"<ul> <li>Input: CSV, TSV (auto-detected from extension or <code>--sep</code> parameter)</li> <li>Output: CSV, TSV (auto-detected from file extension)</li> </ul>"},{"location":"commands/simplify-taxa/#expected-input-columns","title":"Expected Input Columns","text":"<p>The command automatically detects and processes any columns matching the pattern <code>*_prediction</code>: - <code>kingdom_prediction</code> - <code>phylum_prediction</code>  - <code>class_prediction</code> - <code>order_prediction</code> - <code>family_prediction</code> - <code>subfamily_prediction</code> - <code>genus_prediction</code> - <code>realm_prediction</code> (if present)</p>"},{"location":"commands/simplify-taxa/#transformation-logic","title":"Transformation Logic","text":""},{"location":"commands/simplify-taxa/#before-transformation","title":"Before Transformation","text":"<pre><code>novel_genus_1_of_novel_family_2_of_novel_order_3_of_Caudoviricetes\n</code></pre>"},{"location":"commands/simplify-taxa/#after-transformation","title":"After Transformation","text":"<pre><code>Caudoviricetes:NO3:NF2:NG1\n</code></pre>"},{"location":"commands/simplify-taxa/#compact-code-format","title":"Compact Code Format","text":"<p>The transformation uses standardized rank codes: - <code>NK</code> = Novel Kingdom - <code>NP</code> = Novel Phylum - <code>NC</code> = Novel Class - <code>NO</code> = Novel Order - <code>NF</code> = Novel Family - <code>NSF</code> = Novel Subfamily - <code>NG</code> = Novel Genus</p>"},{"location":"commands/simplify-taxa/#command-options","title":"Command Options","text":"<pre><code> Simplify vContact taxonomy prediction columns into compact lineage codes.   \n\n Transforms verbose vContact taxonomy strings like                           \n 'novel_genus_1_of_novel_family_2_of_Caudoviricetes' into compact codes like \n 'Caudoviricetes:NF2:NG1'.                                                   \n\n Example:                                                                    \n     phu simplify-taxa -i final_assignments.csv -o simplified.csv           \n     --add-lineage                                                           \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --input-file       -i  PATH  Input vContact final_assignments.csv       \u2502\n\u2502                              [required]                                   \u2502\n\u2502 *  --output-file      -o  PATH  Output path (.csv or .tsv) [required]      \u2502\n\u2502    --add-lineage         FLAG  Append compact_lineage column from deepest \u2502\n\u2502                              simplified rank                              \u2502\n\u2502    --lineage-col         TEXT  Name of the lineage column                 \u2502\n\u2502                              [default: compact_lineage]                   \u2502\n\u2502    --sep                 TEXT  Override delimiter: ',' or '\\t'.           \u2502\n\u2502                              Auto-detected from extension if not set      \u2502\n\u2502    --help            -h        Show this message and exit.                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"commands/simplify-taxa/#examples","title":"Examples","text":""},{"location":"commands/simplify-taxa/#basic-usage","title":"Basic Usage","text":"<pre><code># Simplify CSV\nphu simplify-taxa -i final_assignments.csv -o simplified_taxonomy.csv\n\n# Process TSV format with automatic detection\nphu simplify-taxa -i final_assignments.tsv -o simplified_taxonomy.tsv\n\n# Override input delimiter detection\nphu simplify-taxa -i data.txt -o output.csv --sep \"\\t\"\n</code></pre>"},{"location":"commands/simplify-taxa/#advanced-usage","title":"Advanced Usage","text":"<pre><code># Add compact lineage column with deepest available classification\nphu simplify-taxa -i final_assignments.csv -o simplified.csv --add-lineage\n\n# Customize lineage column name\nphu simplify-taxa -i final_assignments.csv -o simplified.csv \\\n  --add-lineage --lineage-col \"best_taxonomy\"\n</code></pre>"},{"location":"commands/simplify-taxa/#lineage-column-feature","title":"Lineage Column Feature","text":"<p>The <code>--add-lineage</code> option creates an additional column containing the deepest (most specific) available taxonomic classification for each sequence.</p>"},{"location":"commands/simplify-taxa/#priority-order-most-least-specific","title":"Priority Order (Most \u2192 Least Specific)","text":"<ol> <li><code>genus_prediction</code></li> <li><code>subfamily_prediction</code></li> <li><code>family_prediction</code> </li> <li><code>order_prediction</code></li> <li><code>class_prediction</code></li> <li><code>phylum_prediction</code></li> <li><code>kingdom_prediction</code></li> <li><code>realm_prediction</code></li> </ol>"},{"location":"commands/simplify-taxa/#example-output","title":"Example Output","text":"| Sequence | genus_prediction | family_prediction | compact_lineage | |----------|------------------|-------------------|-----------------| | seq1 | Caudoviricetes:NF2:NG1 | Caudoviricetes:NF2 | Caudoviricetes:NF2:NG1 | | seq2 | - | Caudoviricetes:NF5 | Caudoviricetes:NF5 | | seq3 | - | - | - |"},{"location":"commands/simplify-taxa/#special-cases-handled","title":"Special Cases Handled","text":""},{"location":"commands/simplify-taxa/#edge-cases-for-0-chains","title":"Edge Cases for \"0\" Chains","text":"<p>The tool correctly handles vContact2's special \"0\" designation patterns:</p> <pre><code># Input\nnovel_class_0_of_novel_phylum_0_of_novel_kingdom_5_of_Duplodnaviria\n\n# Output  \nDuplodnaviria:NK5:NP0:NC0\n</code></pre>"},{"location":"commands/simplify-taxa/#multiple-candidates","title":"Multiple Candidates","text":"<p>When vContact2 provides multiple taxonomic candidates (separated by <code>||</code>), each is processed independently:</p> <pre><code># Input\nCaudoviricetes:NF1:NG2||Caudoviricetes:NF3:NG4\n\n# Output\nCaudoviricetes:NF1:NG2||Caudoviricetes:NF3:NG4\n</code></pre>"},{"location":"commands/simplify-taxa/#quality-assessment","title":"Quality Assessment","text":"<p>After processing, the command provides a summary showing remaining <code>novel_</code> strings for quality control:</p> <pre><code>QA Summary:\n  genus_prediction: 45 remaining 'novel_' strings\n  family_prediction: 12 remaining 'novel_' strings\n  order_prediction: 3 remaining 'novel_' strings\n</code></pre>"},{"location":"commands/simplify-taxa/#workflow-integration","title":"Workflow Integration","text":""},{"location":"commands/simplify-taxa/#typical-bioinformatics-pipeline","title":"Typical Bioinformatics Pipeline","text":"<pre><code># 1. Run vContact3 (external)\nvcontact3 --nucleotide &lt;viral-genome.fasta&gt; --output-dir &lt;vcontact-output&gt;\n\n# 2. Simplify taxonomy predictions\nphu simplify-taxa -i vcontact_output/final_assignments.csv \\\n  -o taxonomy_simplified.csv --add-lineage\n\n# 3. Use simplified taxonomy for downstream analysis\n# - Phylogenetic visualization\n# - Diversity analysis  \n# - Taxonomic filtering\n</code></pre>"},{"location":"commands/simplify-taxa/#comparison-with-manual-processing","title":"Comparison with Manual Processing","text":"| Task | phu simplify-taxa | Manual Processing | |------|-------------------|-------------------| | **Complexity** | Single command | Custom scripts/regex | | **Edge cases** | Automatically handled | Error-prone | | **Consistency** | Standardized format | Variable approaches | | **Speed** | Optimized pandas operations | Slower loops | | **Maintenance** | Built-in updates | Manual fixes needed |"},{"location":"commands/simplify-taxa/#output-file-structure","title":"Output File Structure","text":"<p>The output file preserves the original structure while transforming taxonomy columns:</p> <pre><code>Original columns + Simplified *_prediction columns [+ compact_lineage column]\n</code></pre> <p>All non-taxonomy columns remain unchanged, ensuring compatibility with existing workflows.</p>"}]}