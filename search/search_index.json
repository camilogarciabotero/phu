{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"phu - Phage Utilities","text":"A modular toolkit for viral genomics workflows"},{"location":"#what-is-phu","title":"What is phu?","text":"<p>phu (phage utilities) is a command-line toolkit designed to streamline viral genomics workflows. It provides intuitive commands that wrap complex bioinformatics utilities behind a consistent interface, making phage and viral sequence analysis more accessible and reproducible.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Modular Design: Clean, focused commands for specific tasks.</li> <li>Easy Installation: Available through Bioconda, PyPI.</li> <li>Reproducible: Consistent interface across different utilities.</li> <li>Well Documented: Comprehensive documentation and examples.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<p>Install <code>phu</code> using mamba or conda from the bioconda channel:</p> <pre><code>mamba create -n phu bioconda::phu\nmamba activate phu\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>phu -h\n\n Usage: phu [OPTIONS] COMMAND [ARGS]...                                                       \n\n Phage utilities CLI                                                                          \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help  -h        Show this message and exit.                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 screen          Screen contigs for a protein family using HMMER on predicted CDS.          \u2502\n\u2502 cluster         Sequence clustering wrapper around external 'vclust' with three modes.     \u2502\n\u2502 simplify-taxa   Simplify vContact taxonomy prediction columns into compact lineage codes.  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"#available-commands","title":"Available Commands","text":""},{"location":"#screen-protein-family-screening","title":"<code>screen</code> - Protein Family Screening","text":"<p>Screen DNA contigs for specific protein families using HMMER on predicted coding sequences. This is particularly useful for identifying viral contigs in metagenomic assemblies or filtering assemblies based on protein content.</p> <p>Example: <pre><code>phu screen --input-contigs assembly.fasta viral_capsid.hmm portal.hmm --combine-mode all\n</code></pre></p> <p>Learn more about protein screening \u2192</p>"},{"location":"#cluster-sequence-clustering","title":"<code>cluster</code> - Sequence Clustering","text":"<p>Cluster viral sequences into operational taxonomic units with three specialized modes:</p> <ul> <li><code>dereplication</code> - Remove duplicate sequences</li> <li><code>votu</code> - Group sequences into viral Operational Taxonomic Units</li> <li><code>species</code> - Create species-level clusters</li> </ul> <p>Example: <pre><code>phu cluster --mode votu --input-contigs viral-genomes.fasta\n</code></pre></p> <p>Learn more about clustering \u2192</p>"},{"location":"#simplify-taxa-taxonomy-simplification","title":"<code>simplify-taxa</code> - Taxonomy Simplification","text":"<p>Simplify verbose vContact taxonomy predictions into compact lineage codes for easier analysis and visualization. Example: <pre><code>phu simplify-taxa -i final_assignments.csv -o simplified_taxonomy.csv\n</code></pre></p> <p>Learn more about taxonomy simplification \u2192</p>"},{"location":"#use-cases","title":"Use Cases","text":"<ul> <li>Viral Identification: Screen metagenomic assemblies for viral contigs using protein markers</li> <li>Multi-marker Analysis: Find contigs with complete sets of viral proteins (e.g., capsid, portal, primase, terminase)</li> <li>Viral Metagenomics: Dereplicate and cluster viral contigs from metagenomic assemblies</li> <li>Phage Genomics: Organize phage genomes into taxonomic groups</li> <li>Comparative Analysis: Prepare datasets for phylogenetic and comparative genomic studies</li> <li>Database Construction: Build reference databases of viral sequences</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Whether it's bug reports, feature requests, or code contributions, please check out our GitHub repository.</p>"},{"location":"#citation","title":"Citation","text":"<p>If you use phu in your research, please cite:</p> <pre><code>Garc\u00eda-Botero, C. (2025). phu: Phage Utilities - A modular toolkit for viral genomics workflows. \nGitHub repository: https://github.com/camilogarciabotero/phu\n</code></pre>"},{"location":"#references","title":"References","text":"<p>This program uses several key tools and libraries, make sure to acknowledge them when using <code>phu</code>:</p> <ul> <li> <p>vclust: A high-performance clustering tool for viral sequences:</p> <p>Zielezinski A, Gudy\u015b A, Barylski J, Siminski K, Rozwalak P, Dutilh BE, Deorowicz S. Ultrafast and accurate sequence alignment and clustering of viral genomes. Nat Methods. https://doi.org/10.1038/s41592-025-02701-7</p> </li> <li> <p>seqkit: A toolkit for FASTA/Q file manipulation.</p> <p>Wei Shen*, Botond Sipos, and Liuyang Zhao. 2024. SeqKit2: A Swiss Army Knife for Sequence and Alignment Processing. iMeta e191. doi:10.1002/imt2.191.</p> </li> <li> <p>Prodigal: A gene prediction tool for prokaryotic genomes.</p> <p>Hyatt, D., Chen, G. L., LoCascio, P. F., Land, M. L., Larimer, F. W., &amp; Hauser, L. J. (2010). Prodigal: prokaryotic gene recognition and translation initiation site identification. BMC bioinformatics, 11(1), 119. https://doi.org/10.1186/1471-2105-11-119</p> </li> <li> <p>pyrodigal: A tool for gene prediction in prokaryotic genomes.</p> <p>Larralde, M., (2022). Pyrodigal: Python bindings and interface to Prodigal, an efficient method for gene prediction in prokaryotes. Journal of Open Source Software, 7(72), 4296, https://doi.org/10.21105/joss.04296</p> </li> <li> <p>HMMER: A suite of tools for sequence analysis using profile hidden Markov models.</p> <p>Eddy, S. R. (2011). Accelerated Profile HMM Searches. PLoS Computational Biology, 7(10), e1002195. https://doi.org/10.1371/journal.pcbi.1002195</p> </li> <li> <p>pyHMMER: Python bindings for HMMER.</p> <p>Larralde, M., &amp; Zeller, G. (2023). PyHMMER: a Python library binding to HMMER for efficient sequence analysis. Bioinformatics, 39(5). https://doi.org/10.1093/bioinformatics/btad214</p> </li> </ul>"},{"location":"commands/cluster/","title":"cluster","text":"<p>Sequence clustering wrapper around external 'vclust' with three preconfigured modes for common viral genomics workflows.</p>"},{"location":"commands/cluster/#overview","title":"Overview","text":"<p>The <code>cluster</code> command provides a simplified interface to the powerful <code>vclust</code> tool, implementing the most common use cases from the vclust wiki with sensible defaults while allowing advanced customization.</p>"},{"location":"commands/cluster/#basic-usage","title":"Basic Usage","text":"<pre><code>phu cluster --mode &lt;MODE&gt; --input-contigs &lt;FASTA_FILE&gt; [options]\n</code></pre> <p>Output files include a TSV file with cluster assignments and a FASTA file with representative sequences.</p> <pre><code>clustered-contigs/\n\u251c\u2500\u2500 ani.ids.tsv\n\u251c\u2500\u2500 ani.tsv\n\u251c\u2500\u2500 cluster_representatives_ids.txt\n\u251c\u2500\u2500 fltr.txt\n\u251c\u2500\u2500 representatives.fna\n\u2514\u2500\u2500 species.tsv\n</code></pre>"},{"location":"commands/cluster/#modes","title":"Modes","text":""},{"location":"commands/cluster/#modes_1","title":"Modes","text":"<p>The <code>dereplication</code> mode removes redundant sequences while keeping representatives, using the cd-hit algorithm and ani metric. It is designed to reduce datasets to representative genomes, as outlined in Section 6.3.</p> <p>The <code>votu</code> mode clusters sequences into viral Operational Taxonomic Units, employing the leiden algorithm and ani metric. This mode groups contigs according to MIUViG standards, detailed in Section 6.2.</p> <p>The <code>species</code> mode classifies viruses into species, utilizing the complete algorithm and tani metric. It follows ICTV standards for species classification, as described in Section 6.1.</p>"},{"location":"commands/cluster/#default-parameters-by-mode","title":"Default Parameters by Mode","text":"Parameter dereplication votu species Algorithm cd-hit leiden complete Metric ani ani tani ANI cutoff 95% 95% 95% Query coverage 85% 85% None Pre-filter min-ident 95% 95% 70%"},{"location":"commands/cluster/#command-options","title":"Command Options","text":"<pre><code> Sequence clustering wrapper around external 'vclust' with three modes.      \n\n For advanced usage, provide custom vclust parameters as a quoted string.    \n See the vclust wiki for parameter details:                                  \n https://github.com/refresh-bio/vclust/wiki                                  \n\n Example:                                                                    \n     phu cluster --mode votu --input-contigs genomes.fna                                               \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --mode                   [dereplication|votu|s  dereplication | votu | \u2502\n\u2502                             pecies]                species                \u2502\n\u2502                                                    [required]             \u2502\n\u2502 *  --input-contigs          PATH                   Input FASTA [required] \u2502\n\u2502    --output-folder          PATH                   Output directory       \u2502\n\u2502                                                    [default:              \u2502\n\u2502                                                    clustered-contigs]     \u2502\n\u2502    --threads                INTEGER RANGE [x&gt;=0]   0=all cores; otherwise \u2502\n\u2502                                                    N threads              \u2502\n\u2502                                                    [default: 0]           \u2502\n\u2502    --vclust-params          TEXT                   Custom vclust          \u2502\n\u2502                                                    parameters:            \u2502\n\u2502                                                    \"--min-kmers 20        \u2502\n\u2502                                                    --outfmt lite --ani    \u2502\n\u2502                                                    0.97\"                  \u2502\n\u2502    --help           -h                             Show this message and  \u2502\n\u2502                                                    exit.                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"commands/cluster/#examples","title":"Examples","text":""},{"location":"commands/cluster/#basic-examples","title":"Basic Examples","text":"<pre><code># Dereplicate viral contigs\nphu cluster --mode dereplication --input-contigs viral_contigs.fna\n\n# Cluster into vOTUs following MIUViG standards\nphu cluster --mode votu --input-contigs viral_contigs.fna\n\n# Classify viruses into species following ICTV standards\nphu cluster --mode species --input-contigs complete_genomes.fna\n</code></pre>"},{"location":"commands/cluster/#advanced-usage-with-custom-parameters","title":"Advanced Usage with Custom Parameters","text":"<p>The <code>--vclust-params</code> option allows you to customize any vclust parameter while maintaining the convenience of predefined modes. Parameters are automatically routed to the appropriate vclust command (prefilter, align, cluster).</p>"},{"location":"commands/cluster/#large-dataset-optimization-wiki-section-66","title":"Large Dataset Optimization (Wiki Section 6.6)","text":"<pre><code># Process large diverse dataset (IMG/VR style)\nphu cluster --mode votu --input-contigs large_dataset.fna \\\n  --vclust-params=\"--min-kmers 4 --batch-size 2000000 --kmers-fraction 0.2 --outfmt lite\"\n</code></pre>"},{"location":"commands/cluster/#highly-redundant-dataset-wiki-section-67","title":"Highly Redundant Dataset (Wiki Section 6.7)","text":"<pre><code># Process highly redundant sequences\nphu cluster --mode votu --input-contigs redundant_genomes.fna \\\n  --vclust-params=\"--min-kmers 10 --batch-size 100000 --max-seqs 1000 --outfmt lite --ani 0.97 --qcov 0.95\"\n</code></pre>"},{"location":"commands/cluster/#custom-thresholds","title":"Custom Thresholds","text":"<pre><code># More stringent clustering\nphu cluster --mode votu --input-contigs genomes.fna \\\n  --vclust-params=\"--ani 0.98 --qcov 0.90\"\n\n# Species clustering with custom genus threshold\nphu cluster --mode species --input-contigs genomes.fna \\\n  --vclust-params=\"--tani 0.97\"\n</code></pre>"},{"location":"commands/cluster/#comparison-with-direct-vclust-usage","title":"Comparison with Direct vclust Usage","text":"Task phu cluster Direct vclust Steps Single command 3 separate commands Configuration Preconfigured modes Manual parameter setup Customization <code>--vclust-params</code> option Full control Learning curve Minimal Requires vclust expertise Use case Common workflows Specialized analyses"},{"location":"commands/screen/","title":"screen","text":""},{"location":"commands/screen/#what-does-it-do","title":"What does it do?","text":"<p>The <code>phu screen</code> command helps you find DNA contigs that contain specific protein families. It works by predicting all the proteins in your contigs, then searching those proteins against Hidden Markov Model (HMM) profiles to find matches. Think of it as a molecular search engine for finding contigs with the proteins you care about.</p> <p>This is especially useful when you have metagenomic assemblies and want to pull out contigs that belong to viruses, or when you're looking for contigs that contain specific metabolic pathways.</p>"},{"location":"commands/screen/#basic-usage","title":"Basic Usage","text":"<pre><code>phu screen --input-contigs your_contigs.fasta your_protein_family.hmm\n</code></pre> <p>This simple command will find all contigs in <code>your_contigs.fasta</code> that contain proteins matching <code>your_protein_family.hmm</code> and save them to a new file called <code>screened_contigs.fasta</code> in a folder named <code>phu-screen</code>.</p>"},{"location":"commands/screen/#how-it-works","title":"How it works","text":"<p>The screen command follows four main steps:</p> <p>First, it predicts all possible proteins from your DNA contigs using a tool called <code>pyrodigal</code>. This step also translates your DNA sequences into protein sequences, creating names like <code>contig123|gene1</code>, <code>contig123|gene2</code>, and so on.</p> <p>Second, it searches these predicted proteins against your HMM profiles using HMMER. Each HMM file gets searched separately, and the results are saved in individual files.</p> <p>Third, it decides which contigs to keep based on the search results and your filtering criteria. This is where the \"combine mode\" logic becomes important if you're using multiple HMMs.</p> <p>Finally, it extracts the matching contigs from your original file and saves them to the output. If you've requested it, it also saves the matching proteins organized by which HMM they matched.</p>"},{"location":"commands/screen/#using-multiple-hmms","title":"Using Multiple HMMs","text":"<p>When you provide multiple HMM files, you need to decide how strict you want to be about matches. There are three ways to combine results:</p> <p>Any mode (the default) keeps contigs that match at least one of your HMMs. This is the most permissive option and good for broad searches. For example, if you're looking for any viral marker, you might use several different viral HMMs and keep contigs that match any of them.</p> <p>All mode only keeps contigs that match every single HMM you provided. This is very strict and useful when you need complete sets of proteins. For instance, if you're looking for complete viral genomes that must have all four proteins (capsid, portal, primase, and terminase), you would use \"all\" mode.</p> <p>Threshold mode lets you specify a minimum number of HMMs that must match. This gives you flexibility between \"any\" and \"all\". You might require at least 3 out of 5 HMMs to match, for example.</p>"},{"location":"commands/screen/#understanding-your-results","title":"Understanding Your Results","text":"<p>The main output is <code>screened_contigs.fasta</code>, which contains all the contigs that passed your filtering criteria. You'll also get <code>kept_contigs.txt</code> with just the names of these contigs.</p> <p>If you used multiple HMMs, pay attention to how the combine mode affects your results. In \"any\" mode, you might get different numbers of proteins for each HMM because some contigs only matched some of the HMMs. In \"all\" mode, you'll get exactly the same number of proteins for each HMM because every kept contig had to match all of them.</p> <p>When you use the <code>--save-target-proteins</code> option, you'll get a folder called <code>target_proteins</code> with separate files for each HMM. These contain only the proteins from contigs that made it into your final results, not all the proteins that matched during the search.</p>"},{"location":"commands/screen/#command-options","title":"Command Options","text":"<pre><code> Usage: phu screen [OPTIONS] HMMS...                                             \n\n Screen contigs for protein families using HMMER on predicted CDS.               \n\n Supports multiple HMM files with different combination modes:                   \n - any: Keep contigs matching any HMM (default, most permissive)                 \n - all: Keep contigs matching all HMMs (most restrictive)                        \n - threshold: Keep contigs matching at least --min-hmm-hits HMMs                 \n\n Examples:                                                                       \n     phu screen -i contigs.fa *.hmm                                              \n     phu screen -i contigs.fa file1.hmm file2.hmm file3.hmm                      \n     phu screen -i contigs.fa --combine-mode all path/to/*.hmm\n     phu screen -i contigs.fa --combine-mode threshold --min-hmm-hits 2 *.hmm\n     phu screen -i contigs.fa --save-target-proteins *.hmm \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    hmms      HMMS...  HMM files (supports wildcards like *.hmm) [required]  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --input-contigs  -i                     PATH              Input contigs    \u2502\n\u2502                                                              FASTA            \u2502\n\u2502                                                              [required]       \u2502\n\u2502    --outdir         -o                     PATH              Output directory \u2502\n\u2502                                                              [default:        \u2502\n\u2502                                                              phu-screen]      \u2502\n\u2502    --mode                                  TEXT              pyrodigal mode:  \u2502\n\u2502                                                              meta|single      \u2502\n\u2502                                                              [default: meta]  \u2502\n\u2502    --threads        -t                     INTEGER RANGE     Threads for both \u2502\n\u2502                                            [x&gt;=1]            pyrodigal and    \u2502\n\u2502                                                              hmmsearch        \u2502\n\u2502                                                              [default: 1]     \u2502\n\u2502    --min-bitscore                          FLOAT             Minimum bitscore \u2502\n\u2502                                                              to keep a domain \u2502\n\u2502                                                              hit              \u2502\n\u2502    --max-evalue                            FLOAT             Maximum          \u2502\n\u2502                                                              independent      \u2502\n\u2502                                                              E-value to keep  \u2502\n\u2502                                                              a domain hit     \u2502\n\u2502                                                              [default: 1e-05] \u2502\n\u2502    --top-per-cont\u2026                         INTEGER           Keep top-N hits  \u2502\n\u2502                                                              per contig (by   \u2502\n\u2502                                                              bitscore)        \u2502\n\u2502                                                              [default: 1]     \u2502\n\u2502    --min-gene-len                          INTEGER           Minimum gene     \u2502\n\u2502                                                              length for       \u2502\n\u2502                                                              pyrodigal (nt)   \u2502\n\u2502                                                              [default: 90]    \u2502\n\u2502    --ttable                                INTEGER           NCBI translation \u2502\n\u2502                                                              table for coding \u2502\n\u2502                                                              sequences        \u2502\n\u2502                                                              [default: 11]    \u2502\n\u2502    --keep-proteins      --no-keep-prot\u2026                      Keep the protein \u2502\n\u2502                                                              FASTA used for   \u2502\n\u2502                                                              searching        \u2502\n\u2502                                                              [default:        \u2502\n\u2502                                                              no-keep-protein\u2026 \u2502\n\u2502    --keep-domtbl        --no-keep-domt\u2026                      Keep raw         \u2502\n\u2502                                                              domtblout from   \u2502\n\u2502                                                              hmmsearch        \u2502\n\u2502                                                              [default:        \u2502\n\u2502                                                              keep-domtbl]     \u2502\n\u2502    --combine-mode                          TEXT              How to combine   \u2502\n\u2502                                                              hits from        \u2502\n\u2502                                                              multiple HMMs:   \u2502\n\u2502                                                              any|all|thresho\u2026 \u2502\n\u2502                                                              [default: any]   \u2502\n\u2502    --min-hmm-hits                          INTEGER           Minimum number   \u2502\n\u2502                                                              of HMMs that     \u2502\n\u2502                                                              must hit a       \u2502\n\u2502                                                              contig (for      \u2502\n\u2502                                                              threshold mode)  \u2502\n\u2502                                                              [default: 1]     \u2502\n\u2502    --save-target-\u2026      --no-save-targ\u2026                      Save matched     \u2502\n\u2502                                                              proteins per HMM \u2502\n\u2502                                                              model in         \u2502\n\u2502                                                              target_proteins/ \u2502\n\u2502                                                              subfolder        \u2502\n\u2502                                                              [default:        \u2502\n\u2502                                                              no-save-target-\u2026 \u2502\n\u2502    --help           -h                                       Show this        \u2502\n\u2502                                                              message and      \u2502\n\u2502                                                              exit.            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Use <code>--outdir</code> to change where the results are saved. The default is a folder called <code>phu-screen</code> in your current directory.</p> <p>Use <code>--threads</code> to speed things up if you have multiple CPU cores available. This affects both the protein prediction step and the HMMER searches.</p> <p>Use <code>--max-evalue</code> to make your searches more or less strict. The default is 1e-5, which is reasonably stringent. Lower values (like 1e-10) are more strict, while higher values (like 1e-3) are more permissive.</p> <p>Use <code>--save-target-proteins</code> if you want to get the actual protein sequences that matched each HMM, not just the contigs.</p>"},{"location":"commands/screen/#examples","title":"Examples","text":"<p>Find contigs with any viral protein: <pre><code>phu screen --input-contigs assembly.fasta viral_capsid.hmm viral_polymerase.hmm\n</code></pre></p> <p>Find contigs that have complete viral genomes (all four proteins): <pre><code>phu screen --input-contigs contigs.fa capsid.hmm portal.hmm primase.hmm terminase.hmm --combine-mode all\n</code></pre></p> <p>Use multiple threads and save the matching proteins: <pre><code>phu screen --input-contigs large_assembly.fasta marker.hmm --threads 16 --save-target-proteins\n</code></pre></p> <p>Be more strict about matches: <pre><code>phu screen --input-contigs contigs.fa protein_family.hmm --max-evalue 1e-10\n</code></pre></p>"},{"location":"commands/screen/#what-to-expect","title":"What to expect","text":"<p>Gene prediction usually takes 1-2 minutes per million base pairs of input. The HMMER searches take longer and depend on how many proteins were predicted and how many HMMs you're using. Using more threads helps significantly.</p> <p>The output size depends on how many contigs match your criteria. In \"any\" mode, you might get quite a few contigs. In \"all\" mode, you'll typically get fewer but higher-confidence results.</p> <p>If you don't get any results, try relaxing your E-value threshold or check that your HMM files are in the correct format. If you get too many results, try using \"all\" mode instead of \"any\" mode, or make your E-value threshold more strict.</p>"},{"location":"commands/screen/#requirements","title":"Requirements","text":"<p>You need to have pyrodigal, HMMER, and seqkit installed and available in your PATH. Your input contigs should be in FASTA format, and your HMM files should be in HMMER3 format (usually with .hmm extension).</p> <p>The command expects DNA sequences as input, not protein sequences. If you already have predicted proteins, you should use HMMER directly rather than this command.</p>"},{"location":"commands/simplify-taxa/","title":"simplify-taxa","text":"<p>Simplify vContact taxonomy prediction columns into compact lineage codes for streamlined downstream analysis.</p>"},{"location":"commands/simplify-taxa/#overview","title":"Overview","text":"<p>The <code>simplify-taxa</code> command processes vContact3 final assignment files, transforming verbose taxonomic prediction strings into compact, standardized lineage codes. This transformation makes taxonomic data more manageable for visualization, filtering, and analysis while preserving hierarchical relationships.</p>"},{"location":"commands/simplify-taxa/#basic-usage","title":"Basic Usage","text":"<pre><code>phu simplify-taxa -i &lt;INPUT_FILE&gt; -o &lt;OUTPUT_FILE&gt; [options]\n</code></pre> <p>Input accepts CSV or TSV files from vContact3's <code>final_assignments.csv</code> output. Output format is automatically detected from file extension.</p>"},{"location":"commands/simplify-taxa/#inputoutput-formats","title":"Input/Output Formats","text":""},{"location":"commands/simplify-taxa/#supported-formats","title":"Supported Formats","text":"<ul> <li>Input: CSV, TSV (auto-detected from extension or <code>--sep</code> parameter)</li> <li>Output: CSV, TSV (auto-detected from file extension)</li> </ul>"},{"location":"commands/simplify-taxa/#expected-input-columns","title":"Expected Input Columns","text":"<p>The command automatically detects and processes any columns matching the pattern <code>*_prediction</code>: - <code>kingdom_prediction</code> - <code>phylum_prediction</code>  - <code>class_prediction</code> - <code>order_prediction</code> - <code>family_prediction</code> - <code>subfamily_prediction</code> - <code>genus_prediction</code> - <code>realm_prediction</code> (if present)</p>"},{"location":"commands/simplify-taxa/#transformation-logic","title":"Transformation Logic","text":""},{"location":"commands/simplify-taxa/#before-transformation","title":"Before Transformation","text":"<pre><code>novel_genus_1_of_novel_family_2_of_novel_order_3_of_Caudoviricetes\n</code></pre>"},{"location":"commands/simplify-taxa/#after-transformation","title":"After Transformation","text":"<pre><code>Caudoviricetes:NO3:NF2:NG1\n</code></pre>"},{"location":"commands/simplify-taxa/#compact-code-format","title":"Compact Code Format","text":"<p>The transformation uses standardized rank codes: - <code>NK</code> = Novel Kingdom - <code>NP</code> = Novel Phylum - <code>NC</code> = Novel Class - <code>NO</code> = Novel Order - <code>NF</code> = Novel Family - <code>NSF</code> = Novel Subfamily - <code>NG</code> = Novel Genus</p>"},{"location":"commands/simplify-taxa/#command-options","title":"Command Options","text":"<pre><code> Simplify vContact taxonomy prediction columns into compact lineage codes.   \n\n Transforms verbose vContact taxonomy strings like                           \n 'novel_genus_1_of_novel_family_2_of_Caudoviricetes' into compact codes like \n 'Caudoviricetes:NF2:NG1'.                                                   \n\n Example:                                                                    \n     phu simplify-taxa -i final_assignments.csv -o simplified.csv           \n     --add-lineage                                                           \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --input           -i  PATH  Input vContact final_assignments.csv       \u2502\n\u2502                              [required]                                   \u2502\n\u2502 *  --output          -o  PATH  Output path (.csv or .tsv) [required]      \u2502\n\u2502    --add-lineage         FLAG  Append compact_lineage column from deepest \u2502\n\u2502                              simplified rank                              \u2502\n\u2502    --lineage-col         TEXT  Name of the lineage column                 \u2502\n\u2502                              [default: compact_lineage]                   \u2502\n\u2502    --sep                 TEXT  Override delimiter: ',' or '\\t'.           \u2502\n\u2502                              Auto-detected from extension if not set      \u2502\n\u2502    --help            -h        Show this message and exit.                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"commands/simplify-taxa/#examples","title":"Examples","text":""},{"location":"commands/simplify-taxa/#basic-usage_1","title":"Basic Usage","text":"<pre><code># Simplify taxonomy predictions in CSV format\nphu simplify-taxa -i final_assignments.csv -o simplified_taxonomy.csv\n\n# Process TSV format with automatic detection\nphu simplify-taxa -i final_assignments.tsv -o simplified_taxonomy.tsv\n\n# Override input delimiter detection\nphu simplify-taxa -i data.txt -o output.csv --sep \"\\t\"\n</code></pre>"},{"location":"commands/simplify-taxa/#advanced-usage","title":"Advanced Usage","text":"<pre><code># Add compact lineage column with deepest available classification\nphu simplify-taxa -i final_assignments.csv -o simplified.csv --add-lineage\n\n# Customize lineage column name\nphu simplify-taxa -i final_assignments.csv -o simplified.csv \\\n  --add-lineage --lineage-col \"best_taxonomy\"\n</code></pre>"},{"location":"commands/simplify-taxa/#lineage-column-feature","title":"Lineage Column Feature","text":"<p>The <code>--add-lineage</code> option creates an additional column containing the deepest (most specific) available taxonomic classification for each sequence.</p>"},{"location":"commands/simplify-taxa/#priority-order-most-least-specific","title":"Priority Order (Most \u2192 Least Specific)","text":"<ol> <li><code>genus_prediction</code></li> <li><code>subfamily_prediction</code></li> <li><code>family_prediction</code> </li> <li><code>order_prediction</code></li> <li><code>class_prediction</code></li> <li><code>phylum_prediction</code></li> <li><code>kingdom_prediction</code></li> <li><code>realm_prediction</code></li> </ol>"},{"location":"commands/simplify-taxa/#example-output","title":"Example Output","text":"Sequence genus_prediction family_prediction compact_lineage seq1 Caudoviricetes:NF2:NG1 Caudoviricetes:NF2 Caudoviricetes:NF2:NG1 seq2 - Caudoviricetes:NF5 Caudoviricetes:NF5 seq3 - - -"},{"location":"commands/simplify-taxa/#special-cases-handled","title":"Special Cases Handled","text":""},{"location":"commands/simplify-taxa/#edge-cases-for-0-chains","title":"Edge Cases for \"0\" Chains","text":"<p>The tool correctly handles vContact2's special \"0\" designation patterns:</p> <pre><code># Input\nnovel_class_0_of_novel_phylum_0_of_novel_kingdom_5_of_Duplodnaviria\n\n# Output  \nDuplodnaviria:NK5:NP0:NC0\n</code></pre>"},{"location":"commands/simplify-taxa/#multiple-candidates","title":"Multiple Candidates","text":"<p>When vContact2 provides multiple taxonomic candidates (separated by <code>||</code>), each is processed independently:</p> <pre><code># Input\nCaudoviricetes:NF1:NG2||Caudoviricetes:NF3:NG4\n\n# Output\nCaudoviricetes:NF1:NG2||Caudoviricetes:NF3:NG4\n</code></pre>"},{"location":"commands/simplify-taxa/#quality-assessment","title":"Quality Assessment","text":"<p>After processing, the command provides a summary showing remaining <code>novel_</code> strings for quality control:</p> <pre><code>QA Summary:\n  genus_prediction: 45 remaining 'novel_' strings\n  family_prediction: 12 remaining 'novel_' strings\n  order_prediction: 3 remaining 'novel_' strings\n</code></pre>"},{"location":"commands/simplify-taxa/#workflow-integration","title":"Workflow Integration","text":""},{"location":"commands/simplify-taxa/#typical-bioinformatics-pipeline","title":"Typical Bioinformatics Pipeline","text":"<pre><code># 1. Run vContact3 (external)\nvcontact3 --nucleotide &lt;viral-genome.fasta&gt; --output-dir &lt;vcontact-output&gt;\n\n# 2. Simplify taxonomy predictions\nphu simplify-taxa -i vcontact_output/final_assignments.csv \\\n  -o taxonomy_simplified.csv --add-lineage\n\n# 3. Use simplified taxonomy for downstream analysis\n# - Phylogenetic visualization\n# - Diversity analysis  \n# - Taxonomic filtering\n</code></pre>"},{"location":"commands/simplify-taxa/#comparison-with-manual-processing","title":"Comparison with Manual Processing","text":"Task phu simplify-taxa Manual Processing Complexity Single command Custom scripts/regex Edge cases Automatically handled Error-prone Consistency Standardized format Variable approaches Speed Optimized pandas operations Slower loops Maintenance Built-in updates Manual fixes needed"},{"location":"commands/simplify-taxa/#output-file-structure","title":"Output File Structure","text":"<p>The output file preserves the original structure while transforming taxonomy columns:</p> <pre><code>Original columns + Simplified *_prediction columns [+ compact_lineage column]\n</code></pre> <p>All non-taxonomy columns remain unchanged, ensuring compatibility with existing workflows.</p>"}]}